{"version":3,"sources":["config.js","logo.svg","api.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GOOGLE_API_KEY","GOOGLE_CLIENT_ID","CALENDAR_ID","SCOPES","__webpack_require__","p","gapi","window","eventQueryString","concat","moment","toISOString","add","api","authenticate","load","auth2","init","apiKey","clientId","scope","then","getAuthInstance","signIn","all","console","log","getEvents","storeEvents","client","request","path","response","result","items","filter","event","status","events","sort","a","b","start","dateTime","catch","error","deleteDelinquents","deleteEvent","eventId","calendar","delete","calendarId","execute","res","alert","utils","getAllReservations","getAllGunJumpers","reservations","created","isBefore","subtract","getAllRushHourHoggers","bookingWindow","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_getEvents","Api","setState","state","_addDates","output","currentDate","format","formatDate","date","forEach","reservation","idx","push","dateLine","_renderEvent","react_default","createElement","className","onClick","isSameOrAfter","summary","_getAttendeeEmail","diff","attendees","attendee","email","_this2","src","logo","alt","Utils","id","map","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49aa5714.chunk.js","sourcesContent":["module.exports = {\n  /* THE TEST OF SIN */\n  // CALENDAR_ID: \"the.test.of.sin@gmail.com\",\n  GOOGLE_API_KEY: \"AIzaSyAc1DHYVGZTvJ-8M3mRid7IVYJTpZVu-v0\",\n  GOOGLE_CLIENT_ID:\n    \"498483553295-pkbk9dr14ilmphfnk6cg3t6upj08iln3.apps.googleusercontent.com\",\n\n  /* JON OUTRIGGER */\n  CALENDAR_ID: \"jon@montrealoutrigger.com\",\n\n  SCOPES:\n    \"https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events\"\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import moment from \"moment\";\nimport {\n  GOOGLE_API_KEY,\n  GOOGLE_CLIENT_ID,\n  CALENDAR_ID,\n  SCOPES\n} from \"./config\";\n\nconst GOOGLE_API_HOST = \"https://www.googleapis.com/calendar/v3\";\nconst gapi = window.gapi;\n\nconst eventQueryString = `timeMin=${moment().toISOString()}&timeMax=${moment()\n  .add(2, \"w\")\n  .toISOString()}`;\n\nclass Api {\n  authenticate = () => {\n    const init = () =>\n      gapi.auth2\n        .init({\n          apiKey: GOOGLE_API_KEY,\n          clientId: GOOGLE_CLIENT_ID,\n          scope: SCOPES\n        })\n        .then(() =>\n          gapi.auth2\n            .getAuthInstance()\n            .signIn()\n            .then(all => console.log(\"all\", all))\n        );\n    return gapi.load(\"auth2\", init);\n  };\n  getEvents = storeEvents => {\n    const start = () =>\n      gapi.client\n        .init({\n          apiKey: GOOGLE_API_KEY,\n          clientId: GOOGLE_CLIENT_ID,\n          scope: SCOPES\n        })\n        .then(() =>\n          gapi.client\n            .request({\n              path: `${GOOGLE_API_HOST}/calendars/${CALENDAR_ID}/events?${eventQueryString}`\n            })\n            .then(response =>\n              response.result.items.filter(\n                event => event.status !== \"cancelled\"\n              )\n            )\n            .then(events => {\n              const ascByDateTime = (a, b) =>\n                moment(a.start.dateTime) - moment(b.start.dateTime);\n              storeEvents(events.sort(ascByDateTime));\n            })\n            .then(() =>\n              gapi.client.load(\"calendar\", \"v3\", () =>\n                console.log(\"Google Calendar loaded\")\n              )\n            )\n            .catch(console.error)\n        );\n    return gapi.load(\"client:auth2\", start);\n  };\n\n  deleteDelinquents = () => null;\n\n  deleteEvent = eventId => {\n    const request = gapi.client.calendar.events.delete({\n      calendarId: CALENDAR_ID,\n      eventId: eventId\n    });\n    return request.execute(res => {\n      console.log(res);\n      if (!res.error) {\n        alert(\"Booking deleted!\");\n      } else {\n        alert(\"Not logged in!\");\n      }\n    });\n  };\n}\n\nexport default new Api();\n","import moment from \"moment\";\n\nconst bookingWindow = 96;\n\nclass Utils {\n  getAllReservations = events => events;\n  getAllGunJumpers = reservations =>\n    reservations.filter(event =>\n      moment(event.created).isBefore(\n        moment(event.start.dateTime).subtract(bookingWindow, \"hours\")\n      )\n    );\n  getAllRushHourHoggers = reservations => reservations;\n}\n\nexport default new Utils();\n","import React from \"react\";\nimport moment from \"moment\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Api from \"./api.js\";\nimport Utils from \"./utils.js\";\n\nconst bookingWindow = 96;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { events: [] };\n  }\n\n  componentDidMount() {\n    Api.authenticate();\n    this._getEvents();\n  }\n\n  _getEvents = () => {\n    Api.getEvents(events =>\n      this.setState({ events: events }, () => console.log(this.state.events))\n    );\n  };\n\n  _addDates = reservations => {\n    let output = [];\n    const today = moment().format(\"ddd DD MMM\");\n    let currentDate = today;\n    const addDate = date => output.push({ dateLine: date });\n    const formatDate = date => moment(date).format(\"ddd DD MMM\");\n    reservations.forEach((reservation, idx) => {\n      const first = !idx;\n      if (first || formatDate(reservation.start.dateTime) !== currentDate) {\n        currentDate = formatDate(reservation.start.dateTime);\n        addDate(currentDate);\n      }\n      output.push(reservation);\n    });\n    return output;\n  };\n\n  _renderEvent = event =>\n    event.dateLine ? (\n      <p className=\"date-title\">{event.dateLine}</p>\n    ) : (\n      <div\n        onClick={() => {\n          console.log(event);\n          // Api.deleteEvent(event.id);\n        }}\n        className={`list-card ${\n          moment(event.created).isSameOrAfter(\n            moment(event.start.dateTime).subtract(bookingWindow, \"hours\")\n          )\n            ? \"\"\n            : \"delinquent\"\n        }`}\n      >\n        <div className=\"row\">\n          <p className=\"first-row text\">{event.summary}</p>\n          <p className=\"first-row text\">\n            {moment(event.start.dateTime).format(\"h:mm A\")}\n          </p>\n        </div>\n        <div className=\"row\">\n          <p className=\"text\">{this._getAttendeeEmail(event)}</p>\n        </div>\n        <div className=\"row\">\n          <p className=\"text\">\n            Booked {moment(event.created).format(\"DD MMM, h:mm A\")} ({moment(\n              event.start.dateTime\n            ).diff(moment(event.created), \"hours\")}{\" \"}\n            hours early)\n          </p>\n        </div>\n      </div>\n    );\n\n  _getAttendeeEmail = event => {\n    let output = \"< No email >\";\n    if (event.attendees) {\n      event.attendees.forEach(attendee => {\n        if (attendee.email !== \"jon@montrealoutrigger.com\") {\n          output = attendee.email;\n        }\n      });\n    }\n    return output;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"button\" onClick={this._getEvents}>\n            Refresh list\n          </div>\n          <div\n            className=\"button\"\n            onClick={() => {\n              const delinquents = Utils.getAllGunJumpers(this.state.events);\n              delinquents.forEach(event => {\n                Api.deleteEvent(event.id);\n              });\n            }}\n          >\n            Delete Delinquents\n          </div>\n          <div className=\"events\">\n            {this.state.events\n              ? this._addDates(this.state.events).map(this._renderEvent)\n              : null}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}